import functools
from flask import (
    Blueprint,
    flash,
    g,
    redirect,
    render_template,
    request,
    session,
    url_for,
    jsonify
)
from flask.views import MethodView
from werkzeug.security import (
    check_password_hash,
    generate_password_hash
)
from sqlalchemy import text
from sqlalchemy.exc import IntegrityError

from simple_crud_api.serializer import UserCreateSerializer, UserLoginSerializer
from simple_crud_api.database import db_session
from ..models.user import User
from ..models.address import Address
from ..serializer import UserRegisterSerializer

from ..utils.user import UserType

bp = Blueprint("auth_user", __name__, url_prefix="/api/user")


class RegisterView(MethodView):
    init_every_request = False
    
    def __init__(self, model):
        self.model: User = model
        self.db = db_session
        
    def check_user_exists(self, username: str) -> bool:
        query = self.db.query(User).where(self.model.username==username).all()
        if len(query) > 0:
            return True
        return False
    
    def get_user_type(self, value):
        """
        Return appropriate User roles
        """
        if UserType.TeamLead.value == 2:
            return UserType.TeamLead
        if UserType.Manager.value == 3:
            return UserType.Manager
        return None
    
    def post(self):
        try:
            serializer = UserRegisterSerializer(**request.json)
        except (AttributeError, TypeError) as e:
            # generated by serialier
            return jsonify(message="Invalid fields, required username and password"), 400
        
        # check user existence
        if self.check_user_exists(serializer.username):
            return jsonify(message="User name taken"), 302
        
        # check user type
        user_type = self.get_user_type(serializer.user_type)
        if user_type:
            return jsonify(message="Invalid user role."), 400
        
        
        # add user
        print(serializer.username, User.make_passsword(serializer.password))
        user = self.model(
            username=serializer.username, 
            password=User.make_passsword(serializer.password),
        )
        if user_type:
            user.type = user_type
        db_session.add(user)
        db_session.commit()
        
        return jsonify(message="User created successfully"), 201
    
def register_api(app: Blueprint, model: User, name: str):
    app.add_url_rule(f'/{name}', view_func=RegisterView.as_view(f"user-{name}", model))
    
    
register_api(bp, User, 'register')